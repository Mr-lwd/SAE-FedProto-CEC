==================================================
goal = test
device = cuda
device_id = 0
dataset = Cifar10_dir_0.1_imbalance_40
num_classes = 10
model_family = HtFE8
batch_size = 256
num_workers = 0
local_learning_rate = 0.06
use_decay_scheduler = False
learning_rate_decay = False
learning_rate_decay_gamma = 0.99
global_rounds = 200
edge_epochs = 1
local_epochs = 5
algorithm = FedGH
join_ratio = 1.0
random_join_ratio = False
num_clients = 40
num_edges = 10
prev = 0
times = 1
eval_gap = 1
save_folder_name = temp
auto_break = False
feature_dim = 512
vocab_size = 98635
max_len = 200
client_drop_rate = 0.0
train_slow_rate = 0.0
send_slow_rate = 0.0
time_select = False
time_threthold = 10000
optimizer = SGD
lamda = 1.0
weight_decay = 0
trans_delay_simulate = False
momentum = 0.8
agg_type = 0
buffersize = 10
gl_use_clients = 1
test_useglclassifier = 1
gamma = 1
drawtsne = 1
drawround = 20
noise_dim = 512
generator_learning_rate = 0.0001
hidden_dim = 512
server_epochs = 100
alpha = 1.0
beta = 1.0
mentee_learning_rate = 0.005
T_start = 0.95
T_end = 0.98
server_learning_rate = 0.01
margin_threthold = 100.0
generator_path = stylegan/stylegan-xl-models/imagenet64.pkl
stable_diffusion_prompt = a cat
server_batch_size = 100
gen_batch_size = 4
mu = 50.0
==================================================
Random seed set as 42

============= Running time: 0th =============
Creating server and clients ...
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600)
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes)
mobilenet_v2(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes)
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 0
label_counts: defaultdict(<class 'int'>, {3: 759, 8: 61, 1: 17, 9: 4})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 1
label_counts: defaultdict(<class 'int'>, {0: 845, 6: 422, 4: 86, 2: 32})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 2
label_counts: defaultdict(<class 'int'>, {5: 677, 0: 49, 2: 1})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 3
label_counts: defaultdict(<class 'int'>, {6: 299, 3: 122, 1: 205, 0: 656, 5: 29, 2: 3})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 4
label_counts: defaultdict(<class 'int'>, {9: 1176, 0: 484, 5: 15, 4: 18, 6: 38})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 5
label_counts: defaultdict(<class 'int'>, {9: 1172, 8: 161, 0: 169, 5: 2, 4: 10, 3: 1})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 6
label_counts: defaultdict(<class 'int'>, {3: 908, 1: 44, 6: 131, 2: 16, 9: 14, 8: 1})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 7
label_counts: defaultdict(<class 'int'>, {6: 1628, 0: 297, 4: 77, 2: 106, 1: 51})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 8
label_counts: defaultdict(<class 'int'>, {8: 703, 7: 342, 0: 356, 5: 29, 4: 1})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 9
label_counts: defaultdict(<class 'int'>, {2: 627, 9: 327, 8: 53, 6: 6, 5: 5, 1: 2})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 10
label_counts: defaultdict(<class 'int'>, {0: 90, 1: 1087})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 11
label_counts: defaultdict(<class 'int'>, {7: 357, 5: 569, 4: 420, 1: 105, 0: 1})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 12
label_counts: defaultdict(<class 'int'>, {5: 202, 4: 101, 8: 9, 9: 4, 3: 2})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 13
label_counts: defaultdict(<class 'int'>, {5: 717, 2: 358, 1: 131, 4: 399, 3: 1, 0: 4})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 14
label_counts: defaultdict(<class 'int'>, {7: 452, 9: 5})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 15
label_counts: defaultdict(<class 'int'>, {7: 127, 9: 427, 0: 91, 4: 15, 2: 9, 6: 9, 1: 3})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 16
label_counts: defaultdict(<class 'int'>, {1: 1999})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 17
label_counts: defaultdict(<class 'int'>, {2: 1404, 1: 3})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 18
label_counts: defaultdict(<class 'int'>, {8: 1604, 7: 54, 6: 1})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 19
label_counts: defaultdict(<class 'int'>, {3: 177, 4: 466, 8: 28, 1: 8, 2: 2})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 20
label_counts: defaultdict(<class 'int'>, {7: 1892, 5: 294, 0: 134, 2: 105, 6: 15, 4: 23})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 21
label_counts: defaultdict(<class 'int'>, {5: 164, 2: 117, 6: 21, 1: 1, 4: 24, 9: 10, 8: 2})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 22
label_counts: defaultdict(<class 'int'>, {6: 132, 4: 121, 8: 76, 9: 4})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 23
label_counts: defaultdict(<class 'int'>, {9: 945, 1: 113, 3: 25, 7: 320, 4: 9, 6: 29, 2: 9, 8: 2})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 24
label_counts: defaultdict(<class 'int'>, {4: 1435, 2: 186, 0: 164, 1: 31})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 25
label_counts: defaultdict(<class 'int'>, {8: 649, 9: 316, 7: 134, 4: 23, 6: 8, 2: 127})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 26
label_counts: defaultdict(<class 'int'>, {2: 407, 6: 1135, 3: 166, 1: 95, 4: 61, 5: 4})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 27
label_counts: defaultdict(<class 'int'>, {4: 275, 3: 388, 9: 26, 1: 1})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 28
label_counts: defaultdict(<class 'int'>, {8: 388, 7: 203, 0: 4, 3: 28, 2: 31})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 29
label_counts: defaultdict(<class 'int'>, {1: 132, 3: 76, 7: 48, 2: 20, 0: 21})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 30
label_counts: defaultdict(<class 'int'>, {7: 209, 0: 337, 2: 17, 9: 72, 5: 1})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 31
label_counts: defaultdict(<class 'int'>, {2: 822, 8: 241, 4: 7, 7: 94, 1: 16})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 32
label_counts: defaultdict(<class 'int'>, {8: 471, 1: 289, 0: 77, 2: 124, 3: 1, 5: 1})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 33
label_counts: defaultdict(<class 'int'>, {3: 811, 0: 326})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 34
label_counts: defaultdict(<class 'int'>, {5: 1452, 4: 71, 2: 5, 1: 3})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 35
label_counts: defaultdict(<class 'int'>, {6: 588, 7: 116, 0: 8, 8: 1})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 36
label_counts: defaultdict(<class 'int'>, {5: 4, 8: 44, 0: 150, 1: 126, 4: 4})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 37
label_counts: defaultdict(<class 'int'>, {3: 1025, 5: 354, 0: 51, 4: 1})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 38
label_counts: defaultdict(<class 'int'>, {0: 237, 4: 218})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 39
label_counts: defaultdict(<class 'int'>, {4: 647, 3: 11, 7: 97, 1: 6, 5: 1, 2: 1, 8: 1, 0: 1})

Join ratio / total clients: 1.0 / 40
Finished creating server and clients.
-------------------------------------------------- 95.46891069412231

-------------Round number: 0-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.6993
Averaged Train Loss (Regular Model): 0.9987
Averaged Test AUC: 0.9360
Std Test Accurancy: 0.2280
Std Test AUC: 0.0491
-------------------------------------------------- 91.57071042060852

-------------Round number: 1-------------

Evaluate heterogeneous models
