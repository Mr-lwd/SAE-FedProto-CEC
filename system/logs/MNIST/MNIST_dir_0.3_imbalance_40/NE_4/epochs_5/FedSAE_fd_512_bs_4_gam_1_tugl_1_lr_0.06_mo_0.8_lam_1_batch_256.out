==================================================
goal = test
device = cuda
device_id = 0
dataset = MNIST_dir_0.3_imbalance_40
num_classes = 10
model_family = HCNNs8
batch_size = 256
num_workers = 0
local_learning_rate = 0.06
use_decay_scheduler = False
learning_rate_decay = False
learning_rate_decay_gamma = 0.99
global_rounds = 200
edge_epochs = 1
local_epochs = 5
algorithm = FedSAE
join_ratio = 1.0
random_join_ratio = False
num_clients = 40
num_edges = 4
prev = 0
times = 1
eval_gap = 1
save_folder_name = temp
auto_break = False
feature_dim = 512
vocab_size = 98635
max_len = 200
client_drop_rate = 0.0
train_slow_rate = 0.0
send_slow_rate = 0.0
time_select = False
time_threthold = 10000
optimizer = SGD
lamda = 1.0
weight_decay = 0
trans_delay_simulate = False
momentum = 0.8
agg_type = 0
buffersize = 4
gl_use_clients = 1
test_useglclassifier = 1
gamma = 1.0
drawtsne = 1
drawround = 20
noise_dim = 512
generator_learning_rate = 0.0001
hidden_dim = 512
server_epochs = 100
alpha = 1.0
beta = 1.0
mentee_learning_rate = 0.005
T_start = 0.95
T_end = 0.98
server_learning_rate = 0.01
margin_threthold = 100.0
generator_path = stylegan/stylegan-xl-models/imagenet64.pkl
stable_diffusion_prompt = a cat
server_batch_size = 100
gen_batch_size = 4
mu = 50.0
==================================================
Random seed set as 42

============= Running time: 0th =============
Creating server and clients ...
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 0
label_counts: defaultdict(<class 'int'>, {7: 555, 6: 217, 8: 476, 1: 39, 4: 125, 0: 3, 5: 11, 2: 31})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 1
label_counts: defaultdict(<class 'int'>, {1: 333, 8: 357, 7: 261, 0: 228, 3: 105, 4: 47, 2: 9, 5: 6, 6: 4})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 2
label_counts: defaultdict(<class 'int'>, {9: 589, 4: 458, 2: 150, 0: 77, 6: 53, 3: 26, 8: 35, 5: 3, 1: 6})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 3
label_counts: defaultdict(<class 'int'>, {1: 495, 0: 158, 8: 254, 3: 113, 2: 22, 7: 3, 6: 7, 9: 1})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 4
label_counts: defaultdict(<class 'int'>, {6: 69, 7: 207, 8: 302, 3: 297, 0: 55, 1: 31, 5: 7, 9: 14, 4: 1})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 5
label_counts: defaultdict(<class 'int'>, {5: 312, 3: 545, 2: 45, 8: 47, 7: 8, 0: 12, 4: 1, 9: 3})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 6
label_counts: defaultdict(<class 'int'>, {3: 547, 5: 74, 6: 90, 7: 41, 1: 25, 2: 55, 9: 46, 8: 15, 0: 1})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 7
label_counts: defaultdict(<class 'int'>, {8: 546, 7: 55, 2: 54, 3: 1041, 4: 19, 6: 71})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 8
label_counts: defaultdict(<class 'int'>, {2: 159, 7: 322, 9: 119, 4: 87, 5: 291, 8: 140, 6: 92, 3: 8, 0: 24, 1: 6})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 9
label_counts: defaultdict(<class 'int'>, {0: 199, 7: 464, 2: 203, 4: 138, 3: 101, 8: 47, 5: 114, 1: 5, 9: 4})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 10
label_counts: defaultdict(<class 'int'>, {2: 980, 6: 188, 7: 951, 3: 39, 0: 3, 5: 8})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 11
label_counts: defaultdict(<class 'int'>, {5: 579, 4: 100, 0: 803, 2: 58, 1: 11})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 12
label_counts: defaultdict(<class 'int'>, {9: 1822, 3: 372, 6: 311, 4: 240, 5: 107, 0: 46, 2: 2, 8: 10})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 13
label_counts: defaultdict(<class 'int'>, {6: 708, 4: 126, 2: 62, 0: 22, 5: 9, 3: 198, 7: 402, 1: 1})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 14
label_counts: defaultdict(<class 'int'>, {3: 380, 7: 628, 4: 393, 6: 54, 1: 54, 0: 2})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 15
label_counts: defaultdict(<class 'int'>, {9: 294, 7: 199, 1: 279, 8: 107, 4: 57, 6: 16, 3: 8, 2: 4, 0: 5})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 16
label_counts: defaultdict(<class 'int'>, {9: 192, 8: 72, 2: 565, 6: 243, 1: 61, 0: 75, 4: 2, 5: 22, 3: 36, 7: 16})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 17
label_counts: defaultdict(<class 'int'>, {6: 102, 1: 376, 0: 255, 3: 14, 2: 14, 5: 4, 9: 3})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 18
label_counts: defaultdict(<class 'int'>, {4: 749, 3: 407, 5: 258, 2: 7})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 19
label_counts: defaultdict(<class 'int'>, {6: 106, 5: 93, 4: 122, 0: 220, 1: 74, 3: 4, 2: 76, 9: 2, 7: 1})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 20
label_counts: defaultdict(<class 'int'>, {4: 386, 5: 1231, 1: 467, 3: 238, 2: 21})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 21
label_counts: defaultdict(<class 'int'>, {2: 419, 8: 99, 9: 130, 6: 399, 1: 46, 3: 3, 5: 12, 7: 5, 0: 1})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 22
label_counts: defaultdict(<class 'int'>, {1: 834, 0: 234, 2: 285})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 23
label_counts: defaultdict(<class 'int'>, {6: 331, 2: 150, 0: 170, 3: 37, 9: 27, 1: 86, 4: 12, 5: 1, 7: 1})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 24
label_counts: defaultdict(<class 'int'>, {7: 429, 6: 73, 4: 95, 1: 62, 9: 14, 3: 14, 8: 2, 5: 3})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 25
label_counts: defaultdict(<class 'int'>, {2: 154, 1: 744, 4: 387, 3: 4, 7: 9, 5: 21})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 26
label_counts: defaultdict(<class 'int'>, {0: 436, 6: 80, 2: 274, 3: 244, 1: 73, 7: 42, 9: 48, 5: 7, 8: 11, 4: 2})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 27
label_counts: defaultdict(<class 'int'>, {5: 449, 9: 408, 7: 274, 4: 214, 0: 44, 1: 18, 2: 3, 6: 2})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 28
label_counts: defaultdict(<class 'int'>, {0: 534, 3: 404, 2: 383})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 29
label_counts: defaultdict(<class 'int'>, {8: 790, 0: 186, 2: 135, 4: 882, 1: 27, 3: 4, 6: 3, 5: 1})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 30
label_counts: defaultdict(<class 'int'>, {2: 457, 5: 528, 1: 164, 0: 298, 4: 44, 3: 15})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 31
label_counts: defaultdict(<class 'int'>, {9: 275, 1: 451, 6: 12, 4: 110, 8: 27, 0: 8, 7: 1, 3: 2})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 32
label_counts: defaultdict(<class 'int'>, {0: 68, 9: 625, 5: 252, 2: 70, 3: 29, 7: 9, 6: 3, 8: 6, 1: 1})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 33
label_counts: defaultdict(<class 'int'>, {6: 877, 2: 252, 0: 237, 1: 72, 4: 42, 3: 55, 5: 1})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 34
label_counts: defaultdict(<class 'int'>, {0: 675, 4: 234, 1: 71, 9: 128, 6: 57, 2: 44, 7: 6, 5: 20, 3: 1})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 35
label_counts: defaultdict(<class 'int'>, {6: 421, 8: 134, 2: 59, 7: 73, 9: 67, 5: 7, 3: 3, 1: 1})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 36
label_counts: defaultdict(<class 'int'>, {6: 467, 9: 45, 4: 63, 1: 212, 3: 18, 2: 79, 8: 24, 7: 126, 0: 13})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 37
label_counts: defaultdict(<class 'int'>, {8: 1474, 5: 70, 6: 84, 7: 77, 2: 10, 3: 15, 0: 7, 1: 2})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 38
label_counts: defaultdict(<class 'int'>, {1: 734, 7: 245, 8: 100, 3: 44, 5: 28, 9: 7, 6: 28, 4: 8})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 39
label_counts: defaultdict(<class 'int'>, {5: 192, 9: 354, 8: 33, 0: 84, 4: 4, 1: 7, 6: 1, 3: 1})

Join ratio / total clients: 1.0 / 40
Finished creating server and clients.
Trainable_prototypes(
  (embedings): Embedding(10, 512)
  (middle): Sequential(
    (0): Sequential(
      (0): Linear(in_features=512, out_features=512, bias=True)
      (1): ReLU()
    )
  )
  (fc): Linear(in_features=512, out_features=512, bias=True)
)
tobetrained:
[3, 2, 1, 0]
Edge 3 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_10 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_17 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_28 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_18 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_32 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_14 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_1 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_3 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_35 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_23 protos Not Found
Edge 2 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_9 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_38 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_29 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_25 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_8 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_20 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_2 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_0 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_36 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_34 protos Not Found
Edge 1 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_11 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_31 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_7 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_21 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_22 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_13 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_30 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_5 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_33 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_24 protos Not Found
Edge 0 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_12 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_39 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_26 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_16 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_4 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_37 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_19 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_27 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_15 protos Not Found
Server global_protos Not Found
Server glclassifier Not Found
Client_6 protos Not Found
readyList:
[1, 2, 0, 3]
aggregation_buffer:
[1, 2, 0, 3]
train global classifier
train glclassifier time: 6.154874378815293
global classifier accuracy in train virtual: 90.01
Number of samples: 316
end Update
server_global_time: 0.906602380797267
only_train_time: 11.364450501278043

-------------Global Round number: 0-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.8381
Averaged Test Accuracy (Prototype Model): 0.6493
Averaged Train Loss (Regular Model): 0.5910
Averaged Train Loss (Regular + Proto): 0.5910
Std Test Accuracy (Regular Model): 0.1480
Std Test Accuracy (Prototype Model): 0.2487
tobetrained:
[1, 2, 0, 3]
Edge 1 begin training
Edge 2 begin training
Edge 0 begin training
Edge 3 begin training
readyList:
[3, 1, 2, 0]
aggregation_buffer:
[3, 1, 2, 0]
train global classifier
train glclassifier time: 5.341080076992512
global classifier accuracy in train virtual: 99.155
end Update
server_global_time: 1.9371622120961547
only_train_time: 32.37288753222674

-------------Global Round number: 1-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.9552
Averaged Test Accuracy (Prototype Model): 0.9490
Averaged Train Loss (Regular Model): 0.1470
Averaged Train Loss (Regular + Proto): 0.2195
Std Test Accuracy (Regular Model): 0.0367
Std Test Accuracy (Prototype Model): 0.0383
tobetrained:
[3, 1, 2, 0]
Edge 3 begin training
Edge 1 begin training
Edge 2 begin training
Edge 0 begin training
readyList:
[1, 3, 2, 0]
aggregation_buffer:
[1, 3, 2, 0]
train global classifier
train glclassifier time: 4.424575771205127
global classifier accuracy in train virtual: 99.895
end Update
server_global_time: 2.9047862123697996
only_train_time: 49.91818606108427

-------------Global Round number: 2-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.9681
Averaged Test Accuracy (Prototype Model): 0.9659
Averaged Train Loss (Regular Model): 0.0601
Averaged Train Loss (Regular + Proto): 0.0987
Std Test Accuracy (Regular Model): 0.0194
Std Test Accuracy (Prototype Model): 0.0195
tobetrained:
[1, 3, 2, 0]
Edge 1 begin training
Edge 3 begin training
Edge 2 begin training
Edge 0 begin training
readyList:
[1, 3, 2, 0]
aggregation_buffer:
[1, 3, 2, 0]
train global classifier
train glclassifier time: 4.308181002736092
global classifier accuracy in train virtual: 99.985
end Update
server_global_time: 3.942163591273129
only_train_time: 68.0306850625202

-------------Global Round number: 3-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.9730
Averaged Test Accuracy (Prototype Model): 0.9721
Averaged Train Loss (Regular Model): 0.0358
Averaged Train Loss (Regular + Proto): 0.0676
Std Test Accuracy (Regular Model): 0.0152
Std Test Accuracy (Prototype Model): 0.0148
tobetrained:
[1, 3, 2, 0]
Edge 1 begin training
Edge 3 begin training
Edge 2 begin training
Edge 0 begin training
readyList:
[1, 3, 2, 0]
aggregation_buffer:
[1, 3, 2, 0]
train global classifier
train glclassifier time: 5.970544682815671
global classifier accuracy in train virtual: 99.9975
end Update
server_global_time: 5.00880035571754
only_train_time: 89.95637944247574

-------------Global Round number: 4-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.9749
Averaged Test Accuracy (Prototype Model): 0.9741
Averaged Train Loss (Regular Model): 0.0250
Averaged Train Loss (Regular + Proto): 0.0538
Std Test Accuracy (Regular Model): 0.0136
Std Test Accuracy (Prototype Model): 0.0139
tobetrained:
[1, 3, 2, 0]
Edge 1 begin training
Edge 3 begin training
Edge 2 begin training
Edge 0 begin training
readyList:
[1, 3, 2, 0]
aggregation_buffer:
[1, 3, 2, 0]
train global classifier
train glclassifier time: 4.501462599262595
global classifier accuracy in train virtual: 100.0
end Update
server_global_time: 5.964377697557211
only_train_time: 108.81446339096874

-------------Global Round number: 5-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.9752
Averaged Test Accuracy (Prototype Model): 0.9748
Averaged Train Loss (Regular Model): 0.0203
Averaged Train Loss (Regular + Proto): 0.0475
Std Test Accuracy (Regular Model): 0.0149
Std Test Accuracy (Prototype Model): 0.0146
tobetrained:
[1, 3, 2, 0]
Edge 1 begin training
Edge 3 begin training
Edge 2 begin training
Edge 0 begin training
readyList:
[1, 2, 3, 0]
aggregation_buffer:
[1, 2, 3, 0]
train global classifier
