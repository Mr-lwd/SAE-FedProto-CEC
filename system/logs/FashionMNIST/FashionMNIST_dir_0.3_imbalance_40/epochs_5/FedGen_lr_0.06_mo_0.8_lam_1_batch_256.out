==================================================
goal = test
device = cuda
device_id = 0
dataset = FashionMNIST_dir_0.3_imbalance_40
num_classes = 10
model_family = HCNNs8
batch_size = 256
local_learning_rate = 0.06
use_decay_scheduler = False
learning_rate_decay = False
learning_rate_decay_gamma = 0.99
global_rounds = 200
edge_epochs = 1
local_epochs = 5
algorithm = FedGen
join_ratio = 1.0
random_join_ratio = False
num_clients = 40
num_edges = 10
prev = 0
times = 1
eval_gap = 1
save_folder_name = temp
auto_break = False
feature_dim = 512
vocab_size = 98635
max_len = 200
client_drop_rate = 0.0
train_slow_rate = 0.0
send_slow_rate = 0.0
time_select = False
time_threthold = 10000
optimizer = SGD
lamda = 1
weight_decay = 0
trans_delay_simulate = False
momentum = 0.8
agg_type = 0
buffersize = 10
mixclassifier = 0
gl_use_clients = 1
test_useglclassifier = 1
tgpaddmse = 0
addmse = 0
gamma = 1
addTGP = 0
SAEbeta = 0
drawtsne = 1
drawround = 20
noise_dim = 512
generator_learning_rate = 0.005
hidden_dim = 512
server_epochs = 100
alpha = 1.0
beta = 1.0
mentee_learning_rate = 0.005
T_start = 0.95
T_end = 0.98
server_learning_rate = 0.01
margin_threthold = 100.0
generator_path = stylegan/stylegan-xl-models/imagenet64.pkl
stable_diffusion_prompt = a cat
server_batch_size = 100
gen_batch_size = 4
mu = 50.0
==================================================
Random seed set as 42

============= Running time: 0th =============
Creating server and clients ...
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 0
label_counts: defaultdict(<class 'int'>, {0: 263, 1: 304, 5: 94, 9: 505, 3: 25, 2: 86, 6: 3})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 1
label_counts: defaultdict(<class 'int'>, {7: 178, 4: 564, 1: 460, 5: 42, 0: 14, 2: 17, 3: 3, 6: 2})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 2
label_counts: defaultdict(<class 'int'>, {9: 90, 0: 168, 7: 273, 5: 135, 6: 57, 4: 10, 3: 27, 8: 5, 2: 3})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 3
label_counts: defaultdict(<class 'int'>, {8: 158, 3: 137, 2: 329, 0: 1, 4: 43, 6: 83, 9: 14, 5: 3})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 4
label_counts: defaultdict(<class 'int'>, {1: 363, 0: 286, 5: 463, 2: 163, 4: 5})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 5
label_counts: defaultdict(<class 'int'>, {4: 405, 6: 616, 1: 96, 3: 40, 2: 54, 8: 45, 5: 13, 7: 10, 0: 1})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 6
label_counts: defaultdict(<class 'int'>, {4: 237, 8: 342, 9: 383, 3: 21, 6: 26, 2: 5, 1: 9, 7: 1})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 7
label_counts: defaultdict(<class 'int'>, {9: 449, 0: 34, 6: 318, 8: 607, 5: 13, 1: 11, 4: 50, 3: 35, 7: 14, 2: 5})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 8
label_counts: defaultdict(<class 'int'>, {9: 82, 4: 417, 2: 66, 0: 105, 5: 12, 6: 53, 8: 23, 3: 7, 1: 3})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 9
label_counts: defaultdict(<class 'int'>, {3: 908, 1: 129, 2: 172, 0: 71})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 10
label_counts: defaultdict(<class 'int'>, {4: 769, 8: 400, 2: 53, 3: 9, 5: 17, 0: 29, 7: 1, 1: 1, 6: 1})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 11
label_counts: defaultdict(<class 'int'>, {6: 129, 1: 52, 8: 201, 4: 207, 5: 49, 3: 41, 7: 7, 9: 72, 2: 10})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 12
label_counts: defaultdict(<class 'int'>, {5: 83, 6: 190, 3: 124, 1: 196, 0: 162, 9: 11, 4: 1, 7: 1})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 13
label_counts: defaultdict(<class 'int'>, {3: 370, 2: 718, 7: 167, 0: 10, 4: 7, 5: 2, 1: 6})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 14
label_counts: defaultdict(<class 'int'>, {3: 123, 0: 284, 5: 60, 1: 51, 9: 188, 2: 39, 4: 20, 8: 3})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 15
label_counts: defaultdict(<class 'int'>, {6: 947, 5: 209, 1: 38, 0: 74, 3: 11, 4: 1})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 16
label_counts: defaultdict(<class 'int'>, {8: 237, 1: 732, 3: 73, 4: 52, 5: 59, 0: 115, 6: 12})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 17
label_counts: defaultdict(<class 'int'>, {5: 475, 8: 612, 3: 30, 4: 27, 0: 100, 2: 16, 6: 17, 1: 2, 7: 1})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 18
label_counts: defaultdict(<class 'int'>, {5: 25, 7: 204, 4: 95, 8: 325, 1: 87, 3: 28, 6: 2, 0: 1, 2: 1})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 19
label_counts: defaultdict(<class 'int'>, {1: 358, 0: 1178})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 20
label_counts: defaultdict(<class 'int'>, {9: 754, 2: 16, 7: 115, 1: 253, 6: 40, 4: 184, 0: 34, 5: 138, 8: 1, 3: 1})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 21
label_counts: defaultdict(<class 'int'>, {7: 16, 1: 354, 4: 269, 6: 205, 0: 120, 3: 54, 8: 4, 9: 1, 5: 1})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 22
label_counts: defaultdict(<class 'int'>, {7: 357, 5: 221, 1: 96, 6: 58, 2: 8, 0: 11, 8: 15, 4: 1, 3: 1})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 23
label_counts: defaultdict(<class 'int'>, {9: 189, 0: 166, 8: 101, 1: 24, 5: 30, 3: 1, 7: 1})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 24
label_counts: defaultdict(<class 'int'>, {4: 257, 3: 391, 5: 103, 9: 199, 0: 57, 8: 15, 1: 2})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 25
label_counts: defaultdict(<class 'int'>, {3: 361, 5: 462, 1: 32, 0: 72, 7: 205, 2: 142, 4: 6})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 26
label_counts: defaultdict(<class 'int'>, {0: 386, 8: 485, 7: 156, 2: 103, 4: 115, 1: 8, 3: 23, 5: 4})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 27
label_counts: defaultdict(<class 'int'>, {2: 169, 5: 476, 6: 224, 3: 70, 0: 79, 4: 5, 7: 1})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 28
label_counts: defaultdict(<class 'int'>, {0: 17, 1: 43, 9: 192, 3: 17, 7: 126, 2: 39, 8: 67, 4: 1, 5: 8, 6: 2})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 29
label_counts: defaultdict(<class 'int'>, {5: 282, 8: 115, 6: 3, 7: 307, 1: 15, 9: 139, 3: 139, 2: 22, 4: 2})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 30
label_counts: defaultdict(<class 'int'>, {8: 209, 7: 276, 0: 221, 9: 39, 5: 20, 2: 1, 1: 1, 3: 1})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 31
label_counts: defaultdict(<class 'int'>, {2: 462, 1: 196, 4: 536, 0: 86})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 32
label_counts: defaultdict(<class 'int'>, {9: 1136, 7: 49, 2: 274, 6: 75, 5: 143, 3: 51, 1: 20, 0: 31, 8: 12, 4: 1})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 33
label_counts: defaultdict(<class 'int'>, {0: 140, 2: 386, 3: 259, 1: 68, 7: 112, 6: 239, 4: 76})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 34
label_counts: defaultdict(<class 'int'>, {6: 791, 2: 788, 1: 38, 0: 156, 3: 11, 4: 8})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 35
label_counts: defaultdict(<class 'int'>, {0: 298, 2: 89, 4: 308, 7: 35, 3: 119, 1: 25, 5: 65, 9: 69, 6: 15, 8: 1})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 36
label_counts: defaultdict(<class 'int'>, {8: 185, 3: 330, 6: 360, 2: 114, 7: 109, 9: 137, 1: 37, 0: 3, 4: 5})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 37
label_counts: defaultdict(<class 'int'>, {3: 989, 7: 2163, 6: 141, 5: 11, 2: 20, 0: 1, 4: 3})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 38
label_counts: defaultdict(<class 'int'>, {5: 995, 1: 489, 0: 12, 2: 23, 3: 16, 4: 1})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 39
label_counts: defaultdict(<class 'int'>, {8: 428, 2: 330, 6: 198, 1: 37, 5: 11, 7: 2, 0: 12, 3: 2, 4: 1, 9: 3})

Join ratio / total clients: 1.0 / 40
Finished creating server and clients.
------------------------- time cost ------------------------- 17.230837106704712

-------------Round number: 0-------------

Evaluate heterogeneous models
Traceback (most recent call last):
  File "main.py", line 510, in <module>
    run(args)
  File "main.py", line 270, in run
    server.train()
  File "/root/autodl-tmp/SAE-FedProto-CEC/system/flcore/servers/servergen.py", line 78, in train
    self.evaluate_only_models()
AttributeError: 'FedGen' object has no attribute 'evaluate_only_models'
