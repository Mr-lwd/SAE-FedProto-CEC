==================================================
goal = test
device = cuda
device_id = 0
dataset = Cifar10_dir_0.3_imbalance_40
num_classes = 10
model_family = HtM10
batch_size = 256
local_learning_rate = 0.06
use_decay_scheduler = False
learning_rate_decay = False
learning_rate_decay_gamma = 0.99
global_rounds = 100
edge_epochs = 1
local_epochs = 3
algorithm = FedProto
join_ratio = 1.0
random_join_ratio = False
num_clients = 40
num_edges = 10
prev = 0
times = 1
eval_gap = 1
save_folder_name = temp
auto_break = False
feature_dim = 512
vocab_size = 98635
max_len = 200
client_drop_rate = 0.0
train_slow_rate = 0.0
send_slow_rate = 0.0
time_select = False
time_threthold = 10000
lamda = 2
trans_delay_simulate = False
agg_type = 0
buffersize = 5
test_useglclassifier = 1
gamma = 1
drawtsne = True
noise_dim = 512
generator_learning_rate = 0.005
hidden_dim = 512
server_epochs = 100
alpha = 1.0
beta = 1.0
mentee_learning_rate = 0.005
T_start = 0.95
T_end = 0.98
server_learning_rate = 0.01
margin_threthold = 100.0
generator_path = stylegan/stylegan-xl-models/imagenet64.pkl
stable_diffusion_prompt = a cat
server_batch_size = 100
gen_batch_size = 4
mu = 50.0
==================================================
Random seed set as 42

============= Running time: 0th =============
Creating server and clients ...
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600)
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes)
mobilenet_v2(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes)
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes)
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 0
label_counts: defaultdict(<class 'int'>, {3: 400, 7: 347, 1: 47, 4: 179, 6: 87, 8: 41, 0: 2, 9: 2, 5: 2, 2: 1})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 1
label_counts: defaultdict(<class 'int'>, {2: 855, 4: 327, 0: 5, 3: 3})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 2
label_counts: defaultdict(<class 'int'>, {6: 36, 5: 141, 8: 162, 9: 71, 4: 177, 2: 95, 0: 23, 1: 9, 7: 49, 3: 2})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 3
label_counts: defaultdict(<class 'int'>, {9: 347, 5: 394, 7: 415, 4: 88, 0: 3, 2: 15, 8: 32})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 4
label_counts: defaultdict(<class 'int'>, {3: 83, 2: 591, 5: 234, 8: 172, 4: 18, 7: 30, 0: 18, 1: 3})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 5
label_counts: defaultdict(<class 'int'>, {5: 565, 0: 841, 1: 70, 3: 35})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 6
label_counts: defaultdict(<class 'int'>, {3: 381, 6: 154, 8: 143, 1: 15, 9: 43, 0: 93, 4: 2, 7: 1, 2: 1})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 7
label_counts: defaultdict(<class 'int'>, {9: 1519, 4: 349, 7: 79, 3: 115, 0: 78, 2: 76, 5: 29, 1: 6, 6: 1})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 8
label_counts: defaultdict(<class 'int'>, {3: 83, 2: 115, 8: 161, 4: 425, 7: 92, 1: 15, 6: 5, 9: 10, 0: 4, 5: 2})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 9
label_counts: defaultdict(<class 'int'>, {5: 7, 1: 64, 7: 286, 4: 95, 3: 14, 2: 80, 9: 28, 0: 7})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 10
label_counts: defaultdict(<class 'int'>, {8: 906, 0: 830, 4: 108, 5: 5, 2: 10, 6: 6, 1: 17, 3: 11})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 11
label_counts: defaultdict(<class 'int'>, {1: 227, 8: 208, 2: 238, 9: 48, 3: 16, 4: 1, 7: 8, 6: 2, 5: 2})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 12
label_counts: defaultdict(<class 'int'>, {6: 681, 1: 47, 0: 50, 4: 354, 3: 4, 2: 2, 5: 1})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 13
label_counts: defaultdict(<class 'int'>, {6: 426, 4: 10, 0: 464, 3: 90, 2: 271, 1: 67})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 14
label_counts: defaultdict(<class 'int'>, {5: 746, 1: 509, 4: 104, 3: 17, 0: 30, 2: 1})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 15
label_counts: defaultdict(<class 'int'>, {4: 973, 2: 843, 1: 155, 0: 75, 3: 45})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 16
label_counts: defaultdict(<class 'int'>, {3: 448, 9: 202, 4: 43, 5: 71, 6: 120, 8: 77, 0: 8, 1: 2})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 17
label_counts: defaultdict(<class 'int'>, {3: 84, 7: 978, 2: 130, 6: 42, 4: 48, 0: 8, 5: 9})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 18
label_counts: defaultdict(<class 'int'>, {0: 260, 1: 196, 4: 82, 5: 179, 3: 53, 8: 51, 7: 8, 6: 3, 2: 2})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 19
label_counts: defaultdict(<class 'int'>, {1: 456, 8: 150, 3: 7, 9: 86, 2: 46, 6: 20, 5: 56, 7: 10})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 20
label_counts: defaultdict(<class 'int'>, {0: 218, 6: 242, 4: 48, 8: 358, 7: 24, 3: 362, 2: 17, 5: 6})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 21
label_counts: defaultdict(<class 'int'>, {3: 93, 0: 436, 1: 276, 4: 131, 8: 33, 2: 72, 5: 44, 9: 2, 6: 2})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 22
label_counts: defaultdict(<class 'int'>, {8: 459, 6: 159, 3: 97, 9: 131, 1: 82, 5: 64, 7: 22, 4: 2, 2: 1})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 23
label_counts: defaultdict(<class 'int'>, {2: 510, 1: 205, 0: 170, 3: 373})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 24
label_counts: defaultdict(<class 'int'>, {7: 407, 4: 111, 2: 21, 8: 68, 6: 231, 1: 151, 9: 44, 3: 19, 0: 4})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 25
label_counts: defaultdict(<class 'int'>, {7: 336, 1: 353, 6: 83, 5: 197, 4: 100, 2: 11, 0: 2, 3: 29, 8: 3, 9: 2})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 26
label_counts: defaultdict(<class 'int'>, {3: 116, 9: 885, 0: 276, 5: 59, 8: 57, 1: 18, 4: 3, 6: 2})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 27
label_counts: defaultdict(<class 'int'>, {6: 360, 9: 54, 4: 28, 1: 24, 5: 140, 2: 15, 3: 12})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 28
label_counts: defaultdict(<class 'int'>, {8: 31, 5: 486, 0: 87, 4: 71, 1: 148, 2: 2, 7: 29, 6: 12, 3: 1})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 29
label_counts: defaultdict(<class 'int'>, {5: 380, 7: 932, 3: 54, 1: 46, 6: 48, 4: 10, 2: 10})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 30
label_counts: defaultdict(<class 'int'>, {3: 724, 6: 555, 0: 95, 5: 89, 4: 8, 2: 19, 1: 1})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 31
label_counts: defaultdict(<class 'int'>, {7: 52, 9: 201, 1: 130, 0: 185, 4: 61, 6: 65, 5: 41, 2: 12, 3: 7})
FedAvgCNN(in_features=3, num_classes=args.num_classes, dim=1600) model chosen!
id 32
label_counts: defaultdict(<class 'int'>, {5: 339, 6: 11, 8: 81, 9: 53, 2: 65, 3: 3, 0: 33, 1: 9, 7: 1})
torchvision.models.googlenet(pretrained=False, aux_logits=False, num_classes=args.num_classes) model chosen!
id 33
label_counts: defaultdict(<class 'int'>, {4: 82, 1: 688, 6: 249, 0: 10, 8: 63, 7: 39, 5: 32, 2: 2})
mobilenet_v2(pretrained=False, num_classes=args.num_classes) model chosen!
id 34
label_counts: defaultdict(<class 'int'>, {8: 782, 1: 196, 6: 180, 3: 124, 2: 5, 4: 26, 7: 25})
torchvision.models.resnet18(pretrained=False, num_classes=args.num_classes) model chosen!
id 35
label_counts: defaultdict(<class 'int'>, {2: 255, 9: 362, 8: 12, 7: 151, 3: 64, 0: 69, 6: 20, 1: 7, 4: 8})
torchvision.models.resnet34(pretrained=False, num_classes=args.num_classes) model chosen!
id 36
label_counts: defaultdict(<class 'int'>, {5: 152, 8: 159, 7: 10, 4: 109, 9: 83, 1: 70, 2: 15, 0: 1})
torchvision.models.resnet50(pretrained=False, num_classes=args.num_classes) model chosen!
id 37
label_counts: defaultdict(<class 'int'>, {1: 171, 3: 58, 6: 519, 0: 116, 4: 82, 5: 16, 7: 10, 9: 20, 2: 10})
torchvision.models.resnet101(pretrained=False, num_classes=args.num_classes) model chosen!
id 38
label_counts: defaultdict(<class 'int'>, {6: 156, 3: 111, 1: 29, 2: 125, 7: 141, 8: 27, 9: 20, 0: 6, 5: 29})
torchvision.models.resnet152(pretrained=False, num_classes=args.num_classes) model chosen!
id 39
label_counts: defaultdict(<class 'int'>, {9: 312, 3: 345, 8: 216, 4: 217, 0: 3, 7: 4, 5: 5, 1: 1, 2: 1})

Join ratio / total clients: 1.0 / 40
Finished creating server and clients.
tobetrained:
ID: 9
ID: 8
ID: 7
ID: 6
ID: 5
ID: 4
ID: 3
ID: 2
ID: 1
ID: 0
Edge 9 begin training
Server global_protos Not Found
Client_5 protos Not Found
Server global_protos Not Found
Client_31 protos Not Found
Server global_protos Not Found
Client_13 protos Not Found
Server global_protos Not Found
Client_0 protos Not Found
Edge_9 protos Not Found
Client_5 prev_protos Not Found
Client_31 prev_protos Not Found
Client_13 prev_protos Not Found
Client_0 prev_protos Not Found
Traceback (most recent call last):
  File "main.py", line 489, in <module>
    run(args)
  File "main.py", line 270, in run
    server.train()
  File "/root/autodl-tmp/SAE-FedProto-CEC/system/flcore/servers/serverproto.py", line 60, in train
    eglobal_time, etrain_time, etrans_time = edge.train(self.clients)
  File "/root/autodl-tmp/SAE-FedProto-CEC/system/flcore/edges/edgeproto.py", line 71, in train
    self.edgeAggregate(clients)
  File "/root/autodl-tmp/SAE-FedProto-CEC/system/flcore/edges/edgeproto.py", line 147, in edgeAggregate
    edgeProtos[j] += clients[id].label_counts[j] * clientProtos[id][j]
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!
