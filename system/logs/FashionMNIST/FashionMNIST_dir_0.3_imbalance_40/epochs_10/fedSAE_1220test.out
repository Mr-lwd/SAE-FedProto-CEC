
cuda is not avaiable.

==================================================
goal = test
device = cpu
device_id = 0
dataset = FashionMNIST_dir_0.3_imbalance_40
num_classes = 10
model_family = HCNNs8
batch_size = 256
local_learning_rate = 0.03
use_decay_scheduler = False
learning_rate_decay = False
learning_rate_decay_gamma = 0.99
global_rounds = 300
edge_epochs = 1
local_epochs = 10
algorithm = FedSAE
join_ratio = 1.0
random_join_ratio = False
num_clients = 10
num_edges = 10
prev = 0
times = 1
eval_gap = 1
save_folder_name = temp
auto_break = False
feature_dim = 512
vocab_size = 98635
max_len = 200
client_drop_rate = 0.0
train_slow_rate = 0.0
send_slow_rate = 0.0
time_select = False
time_threthold = 10000
lamda = 2.0
trans_delay_simulate = False
agg_type = 0
buffersize = 10
mixclassifier = 0
gl_use_clients = 1
test_useglclassifier = 1
tgpaddmse = 0
addmse = 0
gamma = 1.0
addTGP = 0
SAEbeta = 1.0
drawtsne = 1
drawround = 10
noise_dim = 512
generator_learning_rate = 0.005
hidden_dim = 512
server_epochs = 100
alpha = 1.0
beta = 1.0
mentee_learning_rate = 0.005
T_start = 0.95
T_end = 0.98
server_learning_rate = 0.01
margin_threthold = 1000.0
generator_path = stylegan/stylegan-xl-models/imagenet64.pkl
stable_diffusion_prompt = a cat
server_batch_size = 100
gen_batch_size = 4
mu = 50.0
==================================================
Random seed set as 42

============= Running time: 0th =============
Creating server and clients ...
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes)
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 0
label_counts: defaultdict(<class 'int'>, {5: 106, 1: 338, 0: 287, 3: 26, 9: 545, 6: 3, 2: 98, 4: 1})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 1
label_counts: defaultdict(<class 'int'>, {4: 630, 7: 199, 1: 507, 2: 18, 5: 47, 0: 18, 3: 3, 6: 2})
CNN(num_cov=1, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 2
label_counts: defaultdict(<class 'int'>, {0: 190, 5: 157, 7: 312, 9: 99, 6: 67, 8: 6, 2: 3, 3: 30, 4: 11})
CNN(num_cov=2, hidden_dims=[512], in_features=1, num_classes=args.num_classes) model chosen!
id 3
label_counts: defaultdict(<class 'int'>, {6: 100, 3: 171, 8: 190, 9: 19, 4: 51, 2: 395, 0: 3, 5: 4})
CNN(num_cov=1, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 4
label_counts: defaultdict(<class 'int'>, {5: 553, 0: 327, 1: 428, 2: 202, 4: 5})
CNN(num_cov=2, hidden_dims=[1024], in_features=1, num_classes=args.num_classes) model chosen!
id 5
label_counts: defaultdict(<class 'int'>, {4: 421, 6: 633, 2: 58, 3: 41, 8: 45, 1: 100, 7: 11, 5: 13, 0: 1})
CNN(num_cov=1, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 6
label_counts: defaultdict(<class 'int'>, {4: 260, 9: 425, 8: 384, 3: 24, 1: 12, 2: 6, 6: 31, 7: 1})
CNN(num_cov=2, hidden_dims=[1024, 512], in_features=1, num_classes=args.num_classes) model chosen!
id 7
label_counts: defaultdict(<class 'int'>, {9: 477, 8: 645, 6: 335, 7: 16, 3: 38, 5: 13, 4: 53, 0: 36, 1: 11, 2: 7})
CNN(num_cov=1, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 8
label_counts: defaultdict(<class 'int'>, {4: 502, 9: 102, 0: 124, 6: 63, 2: 81, 8: 26, 5: 17, 3: 9, 1: 3})
CNN(num_cov=2, hidden_dims=[], in_features=1, num_classes=args.num_classes) model chosen!
id 9
label_counts: defaultdict(<class 'int'>, {3: 943, 2: 177, 1: 139, 0: 75})

Join ratio / total clients: 1.0 / 10
Finished creating server and clients.
Trainable_prototypes(
  (embedings): Embedding(10, 512)
  (middle): Sequential(
    (0): Sequential(
      (0): Linear(in_features=512, out_features=512, bias=True)
      (1): ReLU()
    )
  )
  (fc): Linear(in_features=512, out_features=512, bias=True)
)
tobetrained:
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
Edge 9 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_5 protos Not Found
Edge 8 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_7 protos Not Found
Edge 7 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_4 protos Not Found
Edge 6 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_3 protos Not Found
Edge 5 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_2 protos Not Found
Edge 4 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_1 protos Not Found
Edge 3 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_6 protos Not Found
Edge 2 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_9 protos Not Found
Edge 1 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_0 protos Not Found
Edge 0 begin training
Server global_protos Not Found
Server glclassifier Not Found
Client_8 protos Not Found
readyList:
[5, 0, 6, 3, 1, 4, 9, 2, 7, 8]
aggregation_buffer:
[5, 0, 6, 3, 1, 4, 9, 2, 7, 8]
self.N[key]:1045
train global classifier
train glclassifier time: 4.391976831946522
global classifier accuracy in train virtual: 85.87
Number of samples: 88
end Update
server_global_time: 7.805318183731288
only_train_time: 49.18634784081951

-------------Global Round number: 0-------------

Evaluate heterogeneous models
Averaged Test Accuracy (Regular Model): 0.7341
Averaged Test Accuracy (Prototype Model): 0.6234
Std Test Accuracy (Regular Model): 0.2030
Std Test Accuracy (Prototype Model): 0.1809
tobetrained:
[5, 0, 6, 3, 1, 4, 9, 2, 7, 8]
Edge 5 begin training
Edge 0 begin training
Edge 6 begin training
Edge 3 begin training
Edge 1 begin training
Edge 4 begin training
Edge 9 begin training
Edge 2 begin training
Edge 7 begin training
Edge 8 begin training
Traceback (most recent call last):
  File "main.py", line 507, in <module>
    run(args)
  File "main.py", line 270, in run
    server.train()
  File "/home/ubuntu/repos/SAE-FedProto-CEC/system/flcore/servers/serverSAE.py", line 87, in train
    eglobal_time, etrain_time, etrans_time = edge.train(self.clients)
  File "/home/ubuntu/repos/SAE-FedProto-CEC/system/flcore/edges/edgeSAE.py", line 66, in train
    id, train_time, trans_time = clients[selected_cid].train()
  File "/home/ubuntu/repos/SAE-FedProto-CEC/system/flcore/clients/clientSAE.py", line 118, in train
    loss.backward()
  File "/home/ubuntu/miniconda3/envs/torch160/lib/python3.7/site-packages/torch/tensor.py", line 245, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "/home/ubuntu/miniconda3/envs/torch160/lib/python3.7/site-packages/torch/autograd/__init__.py", line 147, in backward
    allow_unreachable=True, accumulate_grad=True)  # allow_unreachable flag
KeyboardInterrupt
